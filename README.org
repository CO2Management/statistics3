* Statistics3 -- Statistical Distributions for Ruby
  I forked Shin-ichiro's statistics2 (sinara@blade.nagaokaut.ac.jp), work, because
  it is in serious need of modernization for the latest Ruby, and I am 
  currently depending on this library for my RubyNEAT work.

  For more information (although these links may be out-of-date):
  . http://www.matsusaka-u.ac.jp/~okumura/algo/
  . http://www5.airnet.ne.jp/tomy/cpro/sslib11.htm

** REQUIREMENTS
   Ruby 2.2.2 or higher

** Installation
   #+begin_src bash
   gem install statistics3
   #+end-src

** Documentation
   Note that I've just modernized this fork, and will attempt 
   to add more documentation as time permits.

*** List of all available functions
    binX_(n, p, x)
    bin_x(n, p, x)
    bindens(n, p, x)
    bindist(n, p, x)
    chi2X_(n, x)
    chi2_x(n, x)
    chi2dens(n, x)
    chi2dist(n, x)
    combi(n, x)
    fX_(n1, n2, x)
    f_x(n1, n2, x)
    fdist(n1, n2, f)
    gamma(x)
    loggamma(x)
    newton_a(y, ini, epsilon = 1.0e-6, limit = 30)
    normal__X_(z)
    normal___x(z)
    normaldist(z)
    normalxXX_(z)
    normalx__x(z)
    p_nor(z)
    p_t(df, t)
    pchi2(n, y)
    pchi2X_(n, y)
    pchi2_x(n, y)
    pchi2dist(n, y)
    perm(n, x = n)
    pf(q, n1, n2)
    pfX_(n1, n2, x)
    pf_x(n1, n2, x)
    pfdist(n1, n2, y)
    pfsub(x, y, z)
    pnorm(qn)
    pnormal__X_(y)
    pnormal___x(y)
    pnormaldist(y)
    pnormalxXX_(z)
    pnormalx__x(y)
    poissonX_(m, x)
    poisson_x(m, x)
    poissondens(m, x)
    poissondist(m, x)
    pt(q, n)
    pt__X_(n, y)
    pt___x(n, y)
    ptdist(n, y)
    ptsub(q, n)
    ptxXX_(n, y)
    ptx__x(n, y)
    q_chi2(df, chi2)
    q_f(df1, df2, f)
    t__X_(n, x)
    t___x(n, x)
    tdist(n, t)
    txXX_(n, x)
    tx__x(n, x)
    
*** Normal Distribution
    # Returns the integral of normal distribution over (-Infty, x].
    def normalxXX_(z); normaldist(z); end
  
    # Returns the integral of normal distribution over [0, x].
    def normal__X_(z); normaldist(z) - 0.5; end
  
    # Returns the integral of normal distribution over [x, Infty).
    def normal___x(z); 1.0 - normaldist(z); end
  
    # Returns the integral of normal distribution over (-Infty, -x] + [x, Infty).
    def normalx__x(z); 2.0 - normaldist(z) * 2.0; end
  
    # inverse of normal-distribution
  
    # Return the P-value of the corresponding integral.
    def pnormalxXX_(z); pnormaldist(z); end
  
    # Return the P-value of the corresponding integral.
    def pnormal__X_(y); pnormalxXX_(y + 0.5); end
  
    # Return the P-value of the corresponding integral.
    def pnormal___x(y); pnormalxXX_(1.0 - y); end
  
    # Return the P-value of the corresponding integral.
    def pnormalx__x(y); pnormalxXX_(1.0 - y/2.0); end
  
    # chi2-distribution
  
    # Returns the integral of Chi-squared distribution with n degrees of freedom over [x, Infty).
    def chi2_x(n, x); 1.0 - chi2dist(n, x); end
  
    # Returns the integral of Chi-squared distribution with n degrees of freedom over [0, x].
    def chi2X_(n, x); chi2dist(n, x); end
  
    # inverse of chi2-distribution
  
    # Return the P-value of the corresponding integral.
    def pchi2_x(n, y); pchi2dist(n, 1.0 - y); end
  
    # Return the P-value of the corresponding integral.
    def pchi2X_(n, y); pchi2dist(n, y); end
  
    # t-distribution
  
    # Returns the integral of normal distribution with n degrees of freedom over (-Infty, -x] + [x, Infty).
    def tx__x(n, x); 2.0 - tdist(n, x) * 2.0; end
  
    # Returns the integral of t-distribution with n degrees of freedom over (-Infty, x].
    def txXX_(n, x); tdist(n, x); end
  
    # Returns the integral of t-distribution with n degrees of freedom over [0, x].
    def t__X_(n, x); tdist(n, x) - 0.5; end
  
    # Returns the integral of t-distribution with n degrees of freedom over [x, Infty).
    def t___x(n, x); 1.0 - tdist(n, x); end
  
    # inverse of t-distribution
  
    # Return the P-value of the corresponding integral.
    def ptx__x(n, y); ptdist(n, 1.0 - y / 2.0); end
  
    # Return the P-value of the corresponding integral.
    def ptxXX_(n, y); ptdist(n, y); end
  
    # Return the P-value of the corresponding integral.
    def pt__X_(n, y); ptdist(n, 0.5 + y); end
  
    # Return the P-value of the corresponding integral.
    def pt___x(n, y); ptdist(n, 1.0 - y); end
  
    # F-distribution
  
    # Returns the integral of F-distribution with n1 and n2 degrees of freedom over [x, Infty).
    def f_x(n1, n2, x); 1.0 - fdist(n1, n2, x); end
  
    # Returns the integral of F-distribution with n1 and n2 degrees of freedom over [0, x].
    def fX_(n1, n2, x); fdist(n1, n2, x); end
  
  
    # inverse of F-distribution
  
    # Return the P-value of the corresponding integral.
    def pf_x(n1, n2, x); pfdist(n1, n2, 1.0 - x); end
  
    # Return the P-value of the corresponding integral.
    def pfX_(n1, n2, x); pfdist(n1, n2, x); end
  
    # discrete distributions
    def binX_(n, p, x); bindist(n, p, x); end
    def bin_x(n, p, x); bindist(n, 1.0 - p, n - x);  end
  
    def poissonX_(m, x); poissondist(m, x); end
    def poisson_x(m, x); 1.0 - poissondist(m, x-1); end

** Usage
*** Example:
    #+begin_src ruby
    require "statistics3"
    puts Statistics3.normaldist(0.27) #=> 0.60641987319804
    #+end_src

** If you don't want to use the C extension:
    #+begin_src ruby
    require "statistics3/no_ext"
    puts Statistics3.normaldist(0.27) #=> 0.606419873198039 (delta of 9.99200722162641e-16)
    #+end_src

** LICENSE:
   MIT


